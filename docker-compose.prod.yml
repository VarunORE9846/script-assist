version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: taskflow-postgres-prod
    restart: always
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - taskflow-network-prod

  # Redis for BullMQ
  redis:
    image: redis:7-alpine
    container_name: taskflow-redis-prod
    restart: always
    volumes:
      - redis_data_prod:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - taskflow-network-prod

  # NestJS Application (Production)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: taskflow-app-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: ${PORT:-3000}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: ${DB_DATABASE}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-1h}
    ports:
      - "${PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - taskflow-network-prod

volumes:
  postgres_data_prod:
    name: taskflow-postgres-data-prod
  redis_data_prod:
    name: taskflow-redis-data-prod

networks:
  taskflow-network-prod:
    name: taskflow-network-prod
    driver: bridge

